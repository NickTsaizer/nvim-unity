using System;
using System.Net;
using System.Text;
using System.Threading;
using UnityEditor;
using UnityEngine;

namespace NvimUnity
{
    [InitializeOnLoad]
    public static class NvimUnityServer
    {
        private static HttpListener _listener;
        private static Thread _listenerThread;
        private static bool _isRunning = false;

        static NvimUnityServer()
        {
            StartServer();
        }

        public static void StartServer()
        {
            if (_isRunning) return;

            _isRunning = true;
            _listener = new HttpListener();
            _listener.Prefixes.Add("http://localhost:5005/");

            _listenerThread = new Thread(() =>
            {
                try
                {
                    _listener.Start();
                    //Debug.Log("[NvimUnity] HTTP Server started on http://localhost:5005");

                    while (_isRunning)
                    {
                        try
                        {
                            var context = _listener.GetContext();
                            HandleRequest(context);
                        }
                        catch (Exception ex)
                        {
                            Debug.LogError($"[NvimUnity] Request error: {ex.Message}");
                        }
                    }
                }
                catch (HttpListenerException e)
                {
                    //Debug.LogError("[NvimUnity] Failed to start server: " + e.Message);
                    _isRunning = false;
                }
            });

            _listenerThread.IsBackground = true;
            _listenerThread.Start();
        }

        private static void HandleRequest(HttpListenerContext context)
        {
            string path = context.Request.Url.AbsolutePath;

            if (path == "/regenerate")
            {
                //Debug.Log("[NvimUnity] Regenerate command received from Neovim.");
                UnityEditor.Compilation.CompilationPipeline.RequestScriptCompilation();
                UnityEditorInternal.InternalEditorUtility.RequestScriptReload();
                RegenerateProjectFiles();
                Respond(context, "Regeneration triggered.");
                return;
            }

            if (path == "/ping")
            {
                Respond(context, "pong");
                return;
            }

            Respond(context, "Unknown command.");
        }

        private static void Respond(HttpListenerContext context, string message)
        {
            byte[] buffer = Encoding.UTF8.GetBytes(message);
            context.Response.ContentLength64 = buffer.Length;
            using (var output = context.Response.OutputStream)
            {
                output.Write(buffer, 0, buffer.Length);
            }
        }

        private static void RegenerateProjectFiles()
        {
            Utils.RegenerateProjectFiles();
        }

        public static void StopServer()
        {
            _isRunning = false;
            _listener?.Stop();
            if (_listenerThread != null && _listenerThread.IsAlive)
            {
                _listenerThread.Abort();
            }

           // Debug.Log("[NvimUnity] HTTP Server stopped.");
        }
    }
}


